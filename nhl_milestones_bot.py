import os, sys, json, time, datetime as dt
from zoneinfo import ZoneInfo
import requests
from bs4 import BeautifulSoup
from html import escape

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (Telegram) ---
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID   = os.getenv("TELEGRAM_CHAT_ID")

# --- –ò–≥—Ä–æ–∫–∏ –∏ —Ü–µ–ª–∏ ---
# type: one of ["points","goals","games","wins"]
TRACK = [
    {"name":"–ù–∏–∫–∏—Ç–∞ –ö—É—á–µ—Ä–æ–≤","id":8476453,"type":"points","target":1000},
    {"name":"–ë—Ä—ç–¥ –ú–∞—Ä—à–∞–Ω","id":8473419,"type":"points","target":1000},
    {"name":"–î–∂–µ–π–º–∏ –ë—ç–Ω–Ω","id":8473994,"type":"points","target":1000},
    {"name":"–õ–µ–æ–Ω –î—Ä–∞–π–∑–∞–π—Ç–ª—å","id":8477934,"type":"points","target":1000},
    {"name":"–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –û–≤–µ—á–∫–∏–Ω","id":8471214,"type":"games","target":1500},
    {"name":"–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –û–≤–µ—á–∫–∏–Ω","id":8471214,"type":"goals","target":900},
    {"name":"–î–∂–æ–Ω –¢–∞–≤–∞—Ä–µ—Å","id":8475166,"type":"goals","target":500},
    {"name":"–ü–∞—Ç—Ä–∏–∫ –ö–µ–π–Ω","id":8474141,"type":"goals","target":500},
    {"name":"–ê–Ω–¥—Ä–µ–π –í–∞—Å–∏–ª–µ–≤—Å–∫–∏–π","id":8476883,"type":"wins","target":350},
    {"name":"–°–µ—Ä–≥–µ–π –ë–æ–±—Ä–æ–≤—Å–∫–∏–π","id":8475683,"type":"wins","target":450},
    {"name":"–°—Ç–∏–≤–µ–Ω –°—Ç—ç–º–∫–æ—Å","id":8474564,"type":"goals","target":600},
]

COACH = {
    "name": "–ü–æ–ª –ú–æ—Ä–∏—Å",
    "target": 2000,
    # –ø–µ—Ä–≤–∏—á–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞, –µ—Å–ª–∏ REST –Ω–µ –¥–∞—Å—Ç
    "records_page": "https://records.nhl.com/coaches/paul-maurice-73"
}

# --- helpers ---
SESSION = requests.Session()
SESSION.headers.update({"User-Agent": "MilestonesBot/1.0 (+github actions)"})


def get_career_stat(person_id: int) -> dict:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ç–æ—Ç–∞–ª—ã —Å —É—á—ë—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞."""
    url = f"https://statsapi.web.nhl.com/api/v1/people/{person_id}?expand=person.stats&stats=careerRegularSeason"
    r = SESSION.get(url, timeout=25)
    r.raise_for_status()
    data = r.json()
    try:
        stat = data["people"][0]["stats"][0]["splits"][0]["stat"]
    except Exception:
        return {}
    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
    return {
        "games": int(stat.get("games", 0)),
        "goals": int(stat.get("goals", 0)),
        "assists": int(stat.get("assists", 0)),
        "points": int(stat.get("points", 0)),
        "wins": int(stat.get("wins", 0)),  # –¥–ª—è –≤—Ä–∞—Ç–∞—Ä–µ–π
        # –Ω–∞ –±—É–¥—É—â–µ–µ: "losses", "ot", "savePercentage" –∏ —Ç.–ø.
    }


def try_coach_rest_fullname(fullname: str) -> int | None:
    """–ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–≥—Ä—ã —Ç—Ä–µ–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ REST stats (–Ω–µ–¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, –Ω–æ —á–∞—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç)."""
    endpoints = [
        f"https://api.nhle.com/stats/rest/en/coach/summary?isAggregate=true&isGame=false&cayenneExp=fullName=%22{requests.utils.quote(fullname)}%22",
        f"https://api.nhle.com/stats/rest/en/coach/summary?isAggregate=false&isGame=false&cayenneExp=fullName=%22{requests.utils.quote(fullname)}%22",
        f"https://api.nhle.com/stats/rest/en/coach/summary?cayenneExp=coachName=%22{requests.utils.quote(fullname)}%22",
    ]
    for url in endpoints:
        try:
            r = SESSION.get(url, timeout=25)
            if r.status_code != 200:
                continue
            j = r.json()
            rows = j.get("data") or j.get("rows") or []
            if not rows:
                continue
            # –í –∞–≥—Ä–µ–≥–∞—Ç–µ –æ–±—ã—á–Ω–æ –µ—Å—Ç—å field gamesCoached –∏–ª–∏ g (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ—Ç—á—ë—Ç–∞)
            keys = ["gamesCoached", "g", "games"]
            for k in keys:
                if k in rows[0]:
                    val = rows[0][k]
                    try:
                        return int(val)
                    except Exception:
                        pass
        except Exception:
            continue
    return None


def scrape_maurice_records_page(url: str) -> int | None:
    """–ü–∞—Ä—Å–∏–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∫–æ—Ä–¥–æ–≤ –ù–•–õ –ø–æ –ü–æ–ª—É –ú–æ—Ä–∏—Å—É –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º total Games (—Ä–µ–≥—É–ª—è—Ä–∫–∞)."""
    try:
        r = SESSION.get(url, timeout=25)
        r.raise_for_status()
        soup = BeautifulSoup(r.text, "html.parser")
        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É Regular Season –∏ —Å—Ç—Ä–æ–∫—É Totals
        # –ü–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ–º—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ç–∫—É: –∏—â–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –µ—Å—Ç—å 'Totals'/'Total' –∏ —Å—Ç–æ–ª–±–µ—Ü 'G'
        tables = soup.find_all("table")
        best_guess = None
        for tbl in tables:
            head = [th.get_text(strip=True) for th in tbl.find_all("th")]
            if not head:
                continue
            if "G" in head or "GP" in head:
                for tr in tbl.find_all("tr"):
                    cells = [td.get_text(strip=True) for td in tr.find_all(["td","th"])]
                    row_text = " ".join(cells).lower()
                    if "total" in row_text or "totals" in row_text:
                        # –Ω–∞–π–¥—ë–º –∏–Ω–¥–µ–∫—Å –∫–æ–ª–æ–Ω–∫–∏ –∏–≥—Ä
                        col = None
                        for key in ("G","GP","Games"):
                            if key in head:
                                col = head.index(key)
                                break
                        if col is not None and len(cells) > col:
                            # –∏–Ω–æ–≥–¥–∞ –≤ Totals –∏–¥—ë—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Å–µ–∫—Ü–∏–π; –±–µ—Ä—ë–º —á–∏—Å–ª–æ
                            val = "".join([c for c in cells[col] if c.isdigit()])
                            if val:
                                best_guess = int(val)
        return best_guess
    except Exception:
        return None


def get_coach_games_current() -> int | None:
    # 1) —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º REST –ø–æ –∏–º–µ–Ω–∏
    n = try_coach_rest_fullname("Paul Maurice")
    if isinstance(n, int) and n > 0:
        return n
    # 2) –±—ç–∫–∞–ø ‚Äî –ø–∞—Ä—Å–∏–º records.nhl.com
    return scrape_maurice_records_page(COACH["records_page"])


def fmt_line(name: str, current: int, target: int, metric_ru: str) -> str:
    left = max(target - current, 0)
    status_emoji = "‚úÖ" if left == 0 else ("üî•" if left <= 10 else "üßä")
    # –º–∏–Ω–∏-–ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–∞ 10 –¥–µ–ª–µ–Ω–∏–π
    total = max(target, current)
    filled = 10 if left == 0 else max(1, round(10 * current / total))
    bar = "‚ñà" * filled + "‚ñë" * (10 - filled)
    return f"<b>{escape(name)}</b> ‚Äî {current} {metric_ru} ¬∑ –æ—Å—Ç–∞–ª–æ—Å—å {left}\n{bar} {status_emoji}"


def build_message() -> str:
    london = ZoneInfo("Europe/London")
    today = dt.datetime.now(tz=london).strftime("%d %b %Y")
    lines = [f"<b>–ù–•–õ ¬∑ –£—Ç—Ä–µ–Ω–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤–µ—Ö–∞–º</b>  ‚Äî {today}", ""]

    # –ò–≥—Ä–æ–∫–∏/–≤—Ä–∞—Ç–∞—Ä–∏
    for item in TRACK:
        stat = get_career_stat(item["id"])
        metric = item["type"]
        current = int(stat.get(metric, 0))
        metric_ru = {
            "points":"–æ—á–∫.",
            "goals":"–≥–æ–ª.",
            "games":"–º–∞—Ç—á.",
            "wins":"–ø–æ–±–µ–¥"
        }[metric]
        lines.append(fmt_line(item["name"], current, item["target"], metric_ru))

    # –¢—Ä–µ–Ω–µ—Ä
    coach_games = get_coach_games_current()
    if coach_games:
        lines.append(fmt_line(COACH["name"], int(coach_games), COACH["target"], "–º–∞—Ç—á."))  # –º–∞—Ç—á–∏ –∫–∞–∫ –º–µ—Ç—Ä–∏–∫–∞
    else:
        lines.append(f"<b>{escape(COACH['name'])}</b> ‚Äî –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —á–∏—Å–ª–æ –º–∞—Ç—á–µ–π (–∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω).")

    lines.append("")
    lines.append("‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø—É–±–ª–∏—á–Ω—ã–µ NHL API/—Å—Ç—Ä–∞–Ω–∏—Ü—ã. –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏.")
    return "\n".join(lines)


def send_telegram(text: str):
    if not (BOT_TOKEN and CHAT_ID):
        print("No TELEGRAM_BOT_TOKEN/CHAT_ID in env", file=sys.stderr)
        return
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_web_page_preview": True
    }
    r = SESSION.post(url, json=payload, timeout=25)
    r.raise_for_status()


if __name__ == "__main__":
    try:
        msg = build_message()
        send_telegram(msg)
        print("OK")
    except Exception as e:
        # —á—Ç–æ–±—ã Action –Ω–µ –ø–∞–¥–∞–ª –Ω–∞–≤—Å–µ–≥–¥–∞ ‚Äî –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º —Å –æ—à–∏–±–∫–æ–π
        print("ERROR:", repr(e), file=sys.stderr)
        sys.exit(1)
