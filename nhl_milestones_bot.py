import os
import sys
import datetime as dt
from zoneinfo import ZoneInfo
import requests
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry
from html import escape

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ======
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

# ====== –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞ –≤–µ—Ö–∞–º–∏ (–º–µ—Ç—Ä–∏–∫–∏: points | goals | games | wins) ======
# –£–±—Ä–∞–Ω—ã: –ö—É—á–µ—Ä–æ–≤‚Üí1000 –æ—á–∫–æ–≤, –û–≤–µ—á–∫–∏–Ω‚Üí1500 –º–∞—Ç—á–µ–π
TRACK = [
    {"name": "–ë—Ä—ç–¥ –ú–∞—Ä—à–∞–Ω",        "id": 8473419, "type": "points", "target": 1000},
    {"name": "–î–∂–µ–π–º–∏ –ë—ç–Ω–Ω",        "id": 8473994, "type": "points", "target": 1000},
    {"name": "–õ–µ–æ–Ω –î—Ä–∞–π–∑–∞–π—Ç–ª—å",    "id": 8477934, "type": "points", "target": 1000},

    {"name": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –û–≤–µ—á–∫–∏–Ω",  "id": 8471214, "type": "goals",  "target": 900},

    {"name": "–î–∂–æ–Ω –¢–∞–≤–∞—Ä–µ—Å",       "id": 8475166, "type": "goals",  "target": 500},
    {"name": "–ü–∞—Ç—Ä–∏–∫ –ö–µ–π–Ω",        "id": 8474141, "type": "goals",  "target": 500},
    {"name": "–î–∂–µ–π–º–∏ –ë—ç–Ω–Ω",        "id": 8473994, "type": "goals",  "target": 400},  # –î–û–ë–ê–í–õ–ï–ù–û

    {"name": "–ê–Ω–¥—Ä–µ–π –í–∞—Å–∏–ª–µ–≤—Å–∫–∏–π", "id": 8476883, "type": "wins",   "target": 350},
    {"name": "–°–µ—Ä–≥–µ–π –ë–æ–±—Ä–æ–≤—Å–∫–∏–π",  "id": 8475683, "type": "wins",   "target": 450},
    {"name": "–ö–æ–Ω–Ω–æ—Ä –•–µ–ª–ª–µ–±–∞–∫",    "id": 8476945, "type": "wins",   "target": 350},  # –î–û–ë–ê–í–õ–ï–ù–û

    {"name": "–°—Ç–∏–≤–µ–Ω –°—Ç—ç–º–∫–æ—Å",     "id": 8474564, "type": "goals",  "target": 600},
]

# ====== HTTP —Å —Ä–µ—Ç—Ä–∞—è–º–∏ ======
def make_session() -> requests.Session:
    s = requests.Session()
    retries = Retry(
        total=6, connect=6, read=6,
        backoff_factor=0.7,
        status_forcelist=[429, 500, 502, 503, 504],
        allowed_methods=["GET", "POST"],
        raise_on_status=False,
    )
    s.mount("https://", HTTPAdapter(max_retries=retries))
    s.headers.update({"User-Agent": "NHL-MilestonesBot/REST-only/1.3"})
    return s

SESSION = make_session()

# ====== –¢–æ—Ç–∞–ª—ã –∫–∞—Ä—å–µ—Ä—ã (—Ä–µ–≥—É–ª—è—Ä–∫–∞) –∏–∑ api.nhle.com ======
def rest_skater_totals(player_id: int) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ç–æ—Ç–∞–ª—ã (—Ä–µ–≥—É–ª—è—Ä–∫–∞) –¥–ª—è –ø–æ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞.
    """
    url = "https://api.nhle.com/stats/rest/en/skater/summary"
    params = {
        "isAggregate": "true",
        "isGame": "false",
        "cayenneExp": f"playerId={player_id} and gameTypeId=2",
    }
    r = SESSION.get(url, params=params, timeout=25)
    r.raise_for_status()
    row = (r.json().get("data") or [{}])[0]
    return {
        "games": int(row.get("gamesPlayed") or row.get("gp") or 0),
        "goals": int(row.get("goals") or 0),
        "assists": int(row.get("assists") or 0),
        "points": int(row.get("points") or 0),
    }

def rest_goalie_totals(player_id: int) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ç–æ—Ç–∞–ª—ã (—Ä–µ–≥—É–ª—è—Ä–∫–∞) –¥–ª—è –≤—Ä–∞—Ç–∞—Ä—è.
    """
    url = "https://api.nhle.com/stats/rest/en/goalie/summary"
    params = {
        "isAggregate": "true",
        "isGame": "false",
        "cayenneExp": f"playerId={player_id} and gameTypeId=2",
    }
    r = SESSION.get(url, params=params, timeout=25)
    r.raise_for_status()
    row = (r.json().get("data") or [{}])[0]
    return {
        "games": int(row.get("gamesPlayed") or row.get("gp") or 0),
        "wins": int(row.get("wins") or row.get("w") or 0),
    }

def get_career_stat(player_id: int, metric_type: str) -> dict:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ç–æ—Ç–∞–ª–∞–º –ø–æ –Ω—É–∂–Ω–æ–π –º–µ—Ç—Ä–∏–∫–µ.
    """
    try:
        if metric_type == "wins":
            return rest_goalie_totals(player_id)
        return rest_skater_totals(player_id)
    except Exception:
        return {}

# ====== –î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –º–∞—Ç—á—É –∏ "–∏–≥—Ä–∞–ª –ª–∏ —Å–µ–≥–æ–¥–Ω—è" ======
def _get_json(url: str, params: dict) -> dict:
    try:
        r = SESSION.get(url, params=params, timeout=25)
        if r.status_code != 200:
            return {}
        return r.json()
    except Exception:
        return {}

def skater_last_game_row(player_id: int) -> dict | None:
    """
    –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—ã–≥—Ä–∞–Ω–Ω—ã–π –º–∞—Ç—á (—Ä–µ–≥—É–ª—è—Ä–∫–∞) –¥–ª—è –ø–æ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞.
    """
    url = "https://api.nhle.com/stats/rest/en/skater/summary"
    params = {
        "isAggregate": "false",
        "isGame": "true",
        "cayenneExp": f"playerId={player_id} and gameTypeId=2",
        "sort": '[{"property":"gameDate","direction":"DESC"}]',
        "limit": "1",
    }
    j = _get_json(url, params)
    rows = j.get("data") or []
    return rows[0] if rows else None

def goalie_last_game_row(player_id: int) -> dict | None:
    """
    –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å—ã–≥—Ä–∞–Ω–Ω—ã–π –º–∞—Ç—á (—Ä–µ–≥—É–ª—è—Ä–∫–∞) –¥–ª—è –≤—Ä–∞—Ç–∞—Ä—è.
    """
    url = "https://api.nhle.com/stats/rest/en/goalie/summary"
    params = {
        "isAggregate": "false",
        "isGame": "true",
        "cayenneExp": f"playerId={player_id} and gameTypeId=2",
        "sort": '[{"property":"gameDate","direction":"DESC"}]',
        "limit": "1",
    }
    j = _get_json(url, params)
    rows = j.get("data") or []
    return rows[0] if rows else None

def _get_int(row: dict, keys: tuple[str, ...], default: int = 0) -> int:
    for k in keys:
        try:
            v = row.get(k)
            if v is None:
                continue
            return int(v)
        except Exception:
            continue
    return default

def _played_today(row: dict) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –º–∞—Ç—á —Å–µ–≥–æ–¥–Ω—è –ø–æ Europe/London.
    """
    if not row:
        return False
    gd = (row.get("gameDate") or "")[:10]  # 'YYYY-MM-DD...'
    if len(gd) != 10:
        return False
    try:
        game_date = dt.date.fromisoformat(gd)
    except Exception:
        return False
    today_ldn = dt.datetime.now(tz=ZoneInfo("Europe/London")).date()
    return game_date == today_ldn

def last_game_delta_and_flag(player_id: int, metric_type: str) -> tuple[int, bool]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (delta, played_today).
      - points: –≥–æ–ª—ã + –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–∞—Ç—á–µ,
      - goals: –≥–æ–ª—ã –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–∞—Ç—á–µ,
      - games: 1 –µ—Å–ª–∏ –∏–≥—Ä–∞–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –º–∞—Ç—á–µ (–∏ —ç—Ç–æ—Ç –º–∞—Ç—á —Å–µ–≥–æ–¥–Ω—è), –∏–Ω–∞—á–µ 0,
      - wins: 1 –µ—Å–ª–∏ –≤—Ä–∞—Ç–∞—Ä—å –ø–æ–±–µ–¥–∏–ª –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≤—ã—Ö–æ–¥–µ, –∏–Ω–∞—á–µ 0.
    played_today = True, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á –∏–º–µ–Ω–Ω–æ —Å–µ–≥–æ–¥–Ω—è (Europe/London).
    """
    try:
        if metric_type == "wins":
            row = goalie_last_game_row(player_id)
            played = _played_today(row)
            if not row:
                return 0, False
            decision = (row.get("decision") or row.get("gameOutcome") or "").strip().upper()
            if decision == "W":
                return 1, played
            w = _get_int(row, ("wins", "w"), 0)
            return (1 if w > 0 else 0), played

        # –ü–æ–ª–µ–≤—ã–µ –∏–≥—Ä–æ–∫–∏
        row = skater_last_game_row(player_id)
        played = _played_today(row)
        if not row:
            return 0, False

        if metric_type == "goals":
            return _get_int(row, ("goals", "g"), 0), played

        if metric_type == "points":
            g = _get_int(row, ("goals", "g"), 0)
            a = _get_int(row, ("assists", "a"), 0)
            return g + a, played

        if metric_type == "games":
            # —Å–∞–º —Ñ–∞–∫—Ç –Ω–∞–ª–∏—á–∏—è —Å—Ç—Ä–æ–∫–∏ ‚Äî –∏–≥—Ä–æ–∫ —Å—ã–≥—Ä–∞–ª, –Ω–æ –Ω–∞–º –≤–∞–∂–Ω–æ –∏–º–µ–Ω–Ω–æ "—Å–µ–≥–æ–¥–Ω—è"
            return (1 if played else 0), played

    except Exception:
        pass

    return 0, False

# ====== –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ======
def fmt_line(name: str, current: int, target: int, metric_ru: str, delta: int, played_today: bool) -> str:
    left = max(target - current, 0)
    status = "‚úÖ" if left == 0 else ("üî•" if left <= 10 else "üßä")
    total = max(target, current) or 1
    filled = 10 if left == 0 else max(1, round(10 * current / total))
    bar = "‚ñà" * filled + "‚ñë" * (10 - filled)
    suffix = f"(+{delta})" if played_today else "(=)"
    return f"<b>{escape(name)}</b> ‚Äî {current} {metric_ru} ¬∑ –æ—Å—Ç–∞–ª–æ—Å—å {left} {suffix}\n{bar} {status}"

def build_message() -> str:
    today = dt.datetime.now(tz=ZoneInfo("Europe/London")).strftime("%d %b %Y")
    lines = [f"<b>–ù–•–õ ¬∑ –£—Ç—Ä–µ–Ω–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤–µ—Ö–∞–º</b> ‚Äî {today}", ""]
    for it in TRACK:
        stat = get_career_stat(it["id"], it["type"])
        current = int(stat.get(it["type"], 0))
        delta, played_today = last_game_delta_and_flag(it["id"], it["type"])
        metric_ru = {"points": "–æ—á–∫.", "goals": "–≥–æ–ª.", "games": "–º–∞—Ç—á.", "wins": "–ø–æ–±–µ–¥"}[it["type"]]
        lines.append(fmt_line(it["name"], current, it["target"], metric_ru, delta, played_today))
    lines += ["", "‚ÑπÔ∏è –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: api.nhle.com (REST). –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏."]
    return "\n".join(lines)

# ====== –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ======
def send_telegram(text: str) -> None:
    if not (BOT_TOKEN and CHAT_ID):
        print("No TELEGRAM_BOT_TOKEN/CHAT_ID in env", file=sys.stderr)
        return
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {"chat_id": CHAT_ID, "text": text, "parse_mode": "HTML", "disable_web_page_preview": True}
    r = SESSION.post(url, json=payload, timeout=25)
    r.raise_for_status()

# ====== –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ======
if __name__ == "__main__":
    try:
        msg = build_message()
        send_telegram(msg)
        print("OK")
    except Exception as e:
        print("ERROR:", repr(e), file=sys.stderr)
        sys.exit(1)
